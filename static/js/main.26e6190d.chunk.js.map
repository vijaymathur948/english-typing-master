{"version":3,"sources":["logo.svg","Components/TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","styled","div","props","toggleTimerVisibility","setState","isTimerVisible","state","startTimer","timerReference","setInterval","seconds","minutes","displayValue","totalTime","timerDisplayValue","clearInterval","changeText","e","a","textValue","target","value","trim","text","currentWord","undefined","originalWord","data","currentWordIndex","substr","length","wrongWord","onKeyPress","isTimerOn","which","wrongWords","toBottom","element","document","getElementById","height","scrollHeight","scrollTop","split","filter","word","index_1","bind","this","id","style","fontSize","margin","padding","paddingBottom","maxHeight","overflow","border","backgroundColor","map","borderRadius","marginRight","display","color","includes","Row","Col","lg","Form","Control","fontWeight","type","autoFocus","onChange","Button","variant","size","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sOAAe,I,mICwLAA,GA9KHC,IAAOC,IAAV,kG,kDAQP,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyBRC,sBAAwB,WACtB,EAAKC,SAAS,CAAEC,gBAAiB,EAAKC,MAAMD,kBA3B3B,EA6BnBE,WAAa,WACX,EAAKH,SAAS,CACZI,eAAgBC,aAAY,WAC1B,EAAKL,SAAS,CAAEM,QAAS,EAAKJ,MAAMI,QAAU,IAC9C,IAAIC,EAAU,EAAKL,MAAMK,QAAU,EAAI,IACnCC,EAAe,EAAKN,MAAMI,QAC1BE,EAAe,KACjBA,EAAe,IAAMA,GAEvB,IAAIC,EAAYF,EAAUC,EAC1B,EAAKR,SAAS,CAAEU,kBAAmBD,IAER,IAAvB,EAAKP,MAAMI,UACbK,cAAc,EAAKT,MAAME,gBACE,IAAvB,EAAKF,MAAMK,UACb,EAAKP,SAAS,CAAEO,QAAS,EAAKL,MAAMK,QAAU,IAC9C,EAAKJ,iBAGR,QAhDY,EAmDnBS,WAnDmB,uCAmDN,WAAMC,GAAN,mBAAAC,EAAA,6DACPC,EAAYF,EAAEG,OAAOC,MAAMC,OADpB,SAEL,EAAKlB,SAAS,CAAEmB,KAAMJ,IAFjB,OAKPK,EAAc,EAAKlB,MAAMiB,UAIRE,KAFjBC,EAAe,EAAKpB,MAAMqB,KAAK,EAAKrB,MAAMsB,qBAGxCF,EAAaG,OAAO,EAAGL,EAAYM,UAAYN,EACjD,EAAKpB,SAAS,CAAE2B,WAAW,IAE3B,EAAK3B,SAAS,CAAE2B,WAAW,KAbpB,2CAnDM,wDAoEnBC,WApEmB,uCAoEN,WAAMf,GAAN,SAAAC,EAAA,yDACN,EAAKZ,MAAM2B,YACd,EAAK1B,aACL,EAAKH,SAAS,CAAE6B,WAAW,KAEb,KAAZhB,EAAEiB,QAAgB,EAAK5B,MAAMiB,KALtB,mBAOT,EAAKnB,SAAS,CAAEmB,KAAM,KAEtB,EAAKnB,SAAS,CAAEwB,iBAAkB,EAAKtB,MAAMsB,iBAAmB,KAE5D,EAAKtB,MAAMyB,UAXN,gCAYD,EAAK3B,SAAS,CAClB+B,WAAW,GAAD,mBAAM,EAAK7B,MAAM6B,YAAjB,CAA6B,EAAK7B,MAAMsB,qBAb7C,OAgBT,EAAKxB,SAAS,CAAE2B,WAAW,IAhBlB,2CApEM,wDAwFnBK,SAAW,WACT,IAAIC,EAAUC,SAASC,eAAe,QAClCC,EAASH,EAAQI,aACrBJ,EAAQK,UAAYF,GAzFpB,EAAKlC,MAAQ,CACXiB,KAAM,GACNI,KAlBI,iNAkBOgB,MAAM,KAAKC,QAAO,SAACC,EAAMC,GAClC,MAAa,KAATD,EAAoBA,EACjB,MAETjB,iBAAkB,EAClBG,WAAW,EACXI,WAAY,GAEZxB,QAAS,EACTD,QAAS,GACTuB,WAAW,EACX5B,gBAAgB,EAChBG,eAAgB,GAChBM,kBAAmB,IAErB,EAAKE,WAAa,EAAKA,WAAW+B,KAAhB,gBAnBD,E,qDAqBnB,WAGEC,KAAK5C,SAAS,CAAEU,kBAAmBkC,KAAK1C,MAAMK,QAAU,U,oBAqE1D,WAAU,IAAD,OACP,OACE,qCACE,qBACEsC,GAAG,OACHC,MAAO,CACLC,SAAU,OACVC,OAAQ,OACRC,QAAS,OACTC,cAAe,OACfC,UAAW,QACXC,SAAU,OACVC,OAAQ,iBACRC,gBAAiB,iBAVrB,SAaGV,KAAK1C,MAAMqB,KAAKgC,KAAI,SAACd,EAAMC,GAC1B,OACE,qBAEEI,MAAO,CACLQ,gBACEZ,IAAY,EAAKxC,MAAMsB,iBACnB,EAAKtB,MAAMyB,UACT,MACA,UACF,SACN6B,aAAc,MACdP,QAAS,OACTQ,YAAa,OACbC,QAAS,eACTC,MAAO,EAAKzD,MAAM6B,WAAW6B,SAASlB,GAClC,MACA,QAfR,UAkBGD,EAAM,MAjBFC,QAuBb,eAACmB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAG,MACR,cAACD,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,cAACC,EAAA,EAAKC,QAAN,CACEnB,MAAO,CACLC,SAAU,OACVmB,WAAY,QAEdjD,MAAO2B,KAAK1C,MAAMiB,KAClBgD,KAAK,OACLC,WAAW,EACXC,SAAUzB,KAAKhC,WACfgB,WAAYgB,KAAKhB,eAGrB,cAACkC,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,CACEC,QAAQ,OACRC,KAAK,KACL1B,MAAO,CAAEa,MAAOf,KAAK1C,MAAMD,eAAiB,GAAK,WACjDwE,QAAS7B,KAAK7C,sBAJhB,SAMG6C,KAAK1C,MAAMQ,gC,GA9JJgE,cCVPC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASC,eAAe,SAM1ByC,M","file":"static/js/main.26e6190d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\"\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\"\r\nimport styled from \"styled-components\"\r\n\r\nconst data = `We have created some responsive starter templates with CSS.\r\nYou are free to modify, save, share, and use them in all your projects.\r\nHeader, equal columns and footer:\r\nHeader, unequal columns and footer:\r\n`\r\n\r\nconst Btn = styled.div`\r\n  color: \"#343A40\";\r\n  :hover {\r\n    background-color: #23272b;\r\n  }\r\n`\r\n\r\nclass TextBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: \"\",\r\n      data: data.split(\" \").filter((word, index_1) => {\r\n        if (word !== \"\") return word\r\n        return \"\"\r\n      }),\r\n      currentWordIndex: 0,\r\n      wrongWord: false,\r\n      wrongWords: [],\r\n\r\n      minutes: 1,\r\n      seconds: 60,\r\n      isTimerOn: false,\r\n      isTimerVisible: true,\r\n      timerReference: \"\",\r\n      timerDisplayValue: \"\",\r\n    }\r\n    this.changeText = this.changeText.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    //this.toBottom()\r\n    //  initialize the timer default value with pading\r\n    this.setState({ timerDisplayValue: this.state.minutes + \":00\" })\r\n  }\r\n  toggleTimerVisibility = () => {\r\n    this.setState({ isTimerVisible: !this.state.isTimerVisible })\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerReference: setInterval(() => {\r\n        this.setState({ seconds: this.state.seconds - 1 })\r\n        var minutes = this.state.minutes - 1 + \":\"\r\n        var displayValue = this.state.seconds\r\n        if (displayValue < 10) {\r\n          displayValue = \"0\" + displayValue\r\n        }\r\n        var totalTime = minutes + displayValue\r\n        this.setState({ timerDisplayValue: totalTime })\r\n\r\n        if (this.state.seconds === 0) {\r\n          clearInterval(this.state.timerReference)\r\n          if (this.state.minutes !== 1) {\r\n            this.setState({ minutes: this.state.minutes - 1 })\r\n            this.startTimer()\r\n          }\r\n        }\r\n      }, 1000),\r\n    })\r\n  }\r\n  changeText = async e => {\r\n    var textValue = e.target.value.trim()\r\n    await this.setState({ text: textValue })\r\n\r\n    // the word that we have typed\r\n    var currentWord = this.state.text\r\n    //  original word so that we can match\r\n    var originalWord = this.state.data[this.state.currentWordIndex]\r\n\r\n    if (originalWord !== undefined) {\r\n      if (originalWord.substr(0, currentWord.length) !== currentWord) {\r\n        this.setState({ wrongWord: true })\r\n      } else {\r\n        this.setState({ wrongWord: false })\r\n      }\r\n    }\r\n  }\r\n  onKeyPress = async e => {\r\n    if (!this.state.isTimerOn) {\r\n      this.startTimer()\r\n      this.setState({ isTimerOn: true })\r\n    }\r\n    if (e.which === 32 && this.state.text) {\r\n      // this.setState({ data: this.state.data + this.state.text })\r\n      this.setState({ text: \"\" })\r\n      // setTimeout(() => this.setState({ text: \"\" }), 10)\r\n      this.setState({ currentWordIndex: this.state.currentWordIndex + 1 })\r\n      // reset the flag\r\n      if (this.state.wrongWord) {\r\n        await this.setState({\r\n          wrongWords: [...this.state.wrongWords, this.state.currentWordIndex],\r\n        })\r\n      }\r\n      this.setState({ wrongWord: false })\r\n      //      this.toBottom()\r\n    }\r\n  }\r\n  toBottom = () => {\r\n    var element = document.getElementById(\"data\")\r\n    var height = element.scrollHeight\r\n    element.scrollTop = height\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div\r\n          id='data'\r\n          style={{\r\n            fontSize: \"30px\",\r\n            margin: \"20px\",\r\n            padding: \"20px\",\r\n            paddingBottom: \"60px\",\r\n            maxHeight: \"400px\",\r\n            overflow: \"auto\",\r\n            border: \"1px solid gray\",\r\n            backgroundColor: \"darkslategray\",\r\n          }}\r\n        >\r\n          {this.state.data.map((word, index_1) => {\r\n            return (\r\n              <h4\r\n                key={index_1}\r\n                style={{\r\n                  backgroundColor:\r\n                    index_1 === this.state.currentWordIndex\r\n                      ? this.state.wrongWord\r\n                        ? \"red\"\r\n                        : \"#007bff\"\r\n                      : \"silver\",\r\n                  borderRadius: \"3px\",\r\n                  padding: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  display: \"inline-block\",\r\n                  color: this.state.wrongWords.includes(index_1)\r\n                    ? \"red\"\r\n                    : \"dark\",\r\n                }}\r\n              >\r\n                {word}{\" \"}\r\n              </h4>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg='3' />\r\n          <Col lg='3'>\r\n            <Form.Control\r\n              style={{\r\n                fontSize: \"25px\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              value={this.state.text}\r\n              type='text'\r\n              autoFocus={false}\r\n              onChange={this.changeText}\r\n              onKeyPress={this.onKeyPress}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant='dark'\r\n              size='lg'\r\n              style={{ color: this.state.isTimerVisible ? \"\" : \"#343A40\" }}\r\n              onClick={this.toggleTimerVisibility}\r\n            >\r\n              {this.state.timerDisplayValue}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextBox\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport TextBox from \"./Components/TextBox\"\nfunction App() {\n  return <TextBox />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}