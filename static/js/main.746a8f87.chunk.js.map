{"version":3,"sources":["logo.svg","Components/TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","props","filterDataAndSave","result","state","modalData","split","filter","word","index_1","setState","data","handleShow","modalState","handleClose","saveData","saveModalData","e","target","value","trim","console","log","which","length","resetModalData","toggleTimerVisibility","isTimerVisible","startTimer","timerReference","setInterval","seconds","minutes","displayValue","totalTime","timerDisplayValue","clearInterval","changeText","a","textValue","text","currentWord","undefined","originalWord","currentWordIndex","substr","wrongWord","onKeyPress","isTimerOn","wrongWords","toBottom","element","document","getElementById","height","scrollHeight","scrollTop","bind","this","id","style","fontSize","margin","padding","paddingBottom","maxHeight","overflow","border","backgroundColor","map","borderRadius","marginRight","display","color","includes","Row","Col","lg","className","Button","size","onClick","Modal","show","onHide","Body","Form","Group","controlId","Label","Control","as","rows","onChange","Footer","variant","fontWeight","type","autoFocus","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mOAAe,I,4HCyOAA,E,kDApOb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,kBAAoB,WAClB,IAAIC,EAAS,EAAKC,MAAMC,UAAUC,MAAM,KAAKC,QAAO,SAACC,EAAMC,GACzD,MAAa,KAATD,EAAoBA,EACjB,MAGT,EAAKE,SAAS,CAAEC,KAAMR,KA7BL,EA+BnBS,WAAa,WACX,EAAKF,SAAS,CAAEG,YAAY,KAhCX,EAkCnBC,YAAc,WACZ,EAAKJ,SAAS,CAAEG,YAAY,KAnCX,EAqCnBE,SAAW,WACT,EAAKb,oBACL,EAAKY,eAvCY,EAyCnBE,cAAgB,SAAAC,GACd,IAAIN,EAAOM,EAAEC,OAAOC,MAAMC,OAC1BC,QAAQC,IAAIX,EAAMM,EAAEC,OAAOK,OACvBZ,EAAKa,QAAQ,EAAKd,SAAS,CAAEL,UAAWM,KA5C3B,EA8CnBc,eAAiB,WACf,EAAKf,SAAS,CAAEL,UAAW,KAC3B,EAAKK,SAAS,CAAEC,KAAM,MAhDL,EAuDnBe,sBAAwB,WACtB,EAAKhB,SAAS,CAAEiB,gBAAiB,EAAKvB,MAAMuB,kBAxD3B,EA0DnBC,WAAa,WACX,EAAKlB,SAAS,CACZmB,eAAgBC,aAAY,WAC1B,EAAKpB,SAAS,CAAEqB,QAAS,EAAK3B,MAAM2B,QAAU,IAC9C,IAAIC,EAAU,EAAK5B,MAAM4B,QAAU,EAAI,IACnCC,EAAe,EAAK7B,MAAM2B,QAC1BE,EAAe,KACjBA,EAAe,IAAMA,GAEvB,IAAIC,EAAYF,EAAUC,EAC1B,EAAKvB,SAAS,CAAEyB,kBAAmBD,IAER,IAAvB,EAAK9B,MAAM2B,UACbK,cAAc,EAAKhC,MAAMyB,gBACE,IAAvB,EAAKzB,MAAM4B,UACb,EAAKtB,SAAS,CAAEsB,QAAS,EAAK5B,MAAM4B,QAAU,IAC9C,EAAKJ,iBAGR,QA7EY,EAgFnBS,WAhFmB,uCAgFN,WAAMpB,GAAN,mBAAAqB,EAAA,6DACPC,EAAYtB,EAAEC,OAAOC,MAAMC,OADpB,SAEL,EAAKV,SAAS,CAAE8B,KAAMD,IAFjB,OAKPE,EAAc,EAAKrC,MAAMoC,UAIRE,KAFjBC,EAAe,EAAKvC,MAAMO,KAAK,EAAKP,MAAMwC,qBAGxCD,EAAaE,OAAO,EAAGJ,EAAYjB,UAAYiB,EACjD,EAAK/B,SAAS,CAAEoC,WAAW,IAE3B,EAAKpC,SAAS,CAAEoC,WAAW,KAbpB,2CAhFM,wDAiGnBC,WAjGmB,uCAiGN,WAAM9B,GAAN,SAAAqB,EAAA,yDACN,EAAKlC,MAAM4C,YACd,EAAKpB,aACL,EAAKlB,SAAS,CAAEsC,WAAW,KAEb,KAAZ/B,EAAEM,QAAgB,EAAKnB,MAAMoC,KALtB,mBAOT,EAAK9B,SAAS,CAAE8B,KAAM,KAEtB,EAAK9B,SAAS,CAAEkC,iBAAkB,EAAKxC,MAAMwC,iBAAmB,KAE5D,EAAKxC,MAAM0C,UAXN,gCAYD,EAAKpC,SAAS,CAClBuC,WAAW,GAAD,mBAAM,EAAK7C,MAAM6C,YAAjB,CAA6B,EAAK7C,MAAMwC,qBAb7C,OAgBT,EAAKlC,SAAS,CAAEoC,WAAW,IAhBlB,2CAjGM,wDAqHnBI,SAAW,WACT,IAAIC,EAAUC,SAASC,eAAe,QAClCC,EAASH,EAAQI,aACrBJ,EAAQK,UAAYF,GAtHpB,EAAKlD,MAAQ,CACXoC,KAAM,GACN7B,KAAM,GACNiC,iBAAkB,EAClBE,WAAW,EACXG,WAAY,GAEZjB,QAAS,EACTD,QAAS,GACTiB,WAAW,EACXrB,gBAAgB,EAChBE,eAAgB,GAChBM,kBAAmB,GAEnBtB,YAAY,EACZR,UAAW,IAEb,EAAKgC,WAAa,EAAKA,WAAWoB,KAAhB,gBAClB,EAAK7C,WAAa,EAAKA,WAAW6C,KAAhB,gBAClB,EAAK3C,YAAc,EAAKA,YAAY2C,KAAjB,gBArBF,E,qDAkDnB,WAGEC,KAAKhD,SAAS,CAAEyB,kBAAmBuB,KAAKtD,MAAM4B,QAAU,U,oBAqE1D,WAAU,IAAD,OACP,OACE,qCACE,qBACE2B,GAAG,OACHC,MAAO,CACLC,SAAU,OACVC,OAAQ,OACRC,QAAS,OACTC,cAAe,OACfC,UAAW,QACXC,SAAU,OACVC,OAAQ,iBACRC,gBAAiB,iBAVrB,SAaGV,KAAKtD,MAAMO,KAAK0D,KAAI,SAAC7D,EAAMC,GAC1B,OACE,qBAEEmD,MAAO,CACLQ,gBACE3D,IAAY,EAAKL,MAAMwC,iBACnB,EAAKxC,MAAM0C,UACT,MACA,UACF,SACNwB,aAAc,MACdP,QAAS,OACTQ,YAAa,OACbC,QAAS,eACTC,MAAO,EAAKrE,MAAM6C,WAAWyB,SAASjE,GAClC,MACA,QAfR,UAkBGD,EAAM,MAjBFC,QAuBb,eAACkE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,UAAU,aAAtB,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAASvB,KAAK9C,WAAhC,wBAGA,eAACsE,EAAA,EAAD,CACEF,KAAK,KACLG,KAAMzB,KAAKtD,MAAMS,WACjBuE,OAAQ1B,KAAK5C,YAHf,UAKE,cAACoE,EAAA,EAAMG,KAAP,UACE,eAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,+BAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,kCACA,cAACH,EAAA,EAAKI,QAAN,CACEC,GAAG,WACHC,KAAM,EACNC,SAAUnC,KAAK1C,qBAIrB,eAACkE,EAAA,EAAMY,OAAP,WACE,cAACf,EAAA,EAAD,CAAQgB,QAAQ,SAASd,QAASvB,KAAKjC,eAAvC,mBAIA,cAACsD,EAAA,EAAD,CAAQgB,QAAQ,YAAYd,QAASvB,KAAK5C,YAA1C,mBAIA,cAACiE,EAAA,EAAD,CAAQgB,QAAQ,UAAUd,QAASvB,KAAK3C,SAAxC,mCAMN,cAAC6D,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,cAACS,EAAA,EAAKI,QAAN,CACE9B,MAAO,CACLC,SAAU,OACVmC,WAAY,QAEd7E,MAAOuC,KAAKtD,MAAMoC,KAClByD,KAAK,OACLC,WAAW,EACXL,SAAUnC,KAAKrB,WACfU,WAAYW,KAAKX,eAGrB,cAAC6B,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,CACEgB,QAAQ,OACRf,KAAK,KACLpB,MAAO,CAAEa,MAAOf,KAAKtD,MAAMuB,eAAiB,GAAK,WACjDsD,QAASvB,KAAKhC,sBAJhB,SAMGgC,KAAKtD,MAAM+B,gC,GA5NJgE,aCGPC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAASC,eAAe,SAM1BgD,M","file":"static/js/main.746a8f87.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\"\r\nimport { Button, Form, Row, Col, Modal } from \"react-bootstrap\"\r\nimport styled from \"styled-components\"\r\n\r\nclass TextBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      text: \"\",\r\n      data: [],\r\n      currentWordIndex: 0,\r\n      wrongWord: false,\r\n      wrongWords: [],\r\n\r\n      minutes: 1,\r\n      seconds: 60,\r\n      isTimerOn: false,\r\n      isTimerVisible: true,\r\n      timerReference: \"\",\r\n      timerDisplayValue: \"\",\r\n\r\n      modalState: false,\r\n      modalData: \"\",\r\n    }\r\n    this.changeText = this.changeText.bind(this)\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n  filterDataAndSave = () => {\r\n    var result = this.state.modalData.split(\" \").filter((word, index_1) => {\r\n      if (word !== \"\") return word\r\n      return \"\"\r\n    })\r\n\r\n    this.setState({ data: result })\r\n  }\r\n  handleShow = () => {\r\n    this.setState({ modalState: true })\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ modalState: false })\r\n  }\r\n  saveData = () => {\r\n    this.filterDataAndSave()\r\n    this.handleClose()\r\n  }\r\n  saveModalData = e => {\r\n    var data = e.target.value.trim()\r\n    console.log(data, e.target.which)\r\n    if (data.length) this.setState({ modalData: data })\r\n  }\r\n  resetModalData = () => {\r\n    this.setState({ modalData: \"\" })\r\n    this.setState({ data: [] })\r\n  }\r\n  componentDidMount() {\r\n    //this.toBottom()\r\n    //  initialize the timer default value with pading\r\n    this.setState({ timerDisplayValue: this.state.minutes + \":00\" })\r\n  }\r\n  toggleTimerVisibility = () => {\r\n    this.setState({ isTimerVisible: !this.state.isTimerVisible })\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerReference: setInterval(() => {\r\n        this.setState({ seconds: this.state.seconds - 1 })\r\n        var minutes = this.state.minutes - 1 + \":\"\r\n        var displayValue = this.state.seconds\r\n        if (displayValue < 10) {\r\n          displayValue = \"0\" + displayValue\r\n        }\r\n        var totalTime = minutes + displayValue\r\n        this.setState({ timerDisplayValue: totalTime })\r\n\r\n        if (this.state.seconds === 0) {\r\n          clearInterval(this.state.timerReference)\r\n          if (this.state.minutes !== 1) {\r\n            this.setState({ minutes: this.state.minutes - 1 })\r\n            this.startTimer()\r\n          }\r\n        }\r\n      }, 1000),\r\n    })\r\n  }\r\n  changeText = async e => {\r\n    var textValue = e.target.value.trim()\r\n    await this.setState({ text: textValue })\r\n\r\n    // the word that we have typed\r\n    var currentWord = this.state.text\r\n    //  original word so that we can match\r\n    var originalWord = this.state.data[this.state.currentWordIndex]\r\n\r\n    if (originalWord !== undefined) {\r\n      if (originalWord.substr(0, currentWord.length) !== currentWord) {\r\n        this.setState({ wrongWord: true })\r\n      } else {\r\n        this.setState({ wrongWord: false })\r\n      }\r\n    }\r\n  }\r\n  onKeyPress = async e => {\r\n    if (!this.state.isTimerOn) {\r\n      this.startTimer()\r\n      this.setState({ isTimerOn: true })\r\n    }\r\n    if (e.which === 32 && this.state.text) {\r\n      // this.setState({ data: this.state.data + this.state.text })\r\n      this.setState({ text: \"\" })\r\n      // setTimeout(() => this.setState({ text: \"\" }), 10)\r\n      this.setState({ currentWordIndex: this.state.currentWordIndex + 1 })\r\n      // reset the flag\r\n      if (this.state.wrongWord) {\r\n        await this.setState({\r\n          wrongWords: [...this.state.wrongWords, this.state.currentWordIndex],\r\n        })\r\n      }\r\n      this.setState({ wrongWord: false })\r\n      //      this.toBottom()\r\n    }\r\n  }\r\n  toBottom = () => {\r\n    var element = document.getElementById(\"data\")\r\n    var height = element.scrollHeight\r\n    element.scrollTop = height\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div\r\n          id='data'\r\n          style={{\r\n            fontSize: \"30px\",\r\n            margin: \"20px\",\r\n            padding: \"20px\",\r\n            paddingBottom: \"60px\",\r\n            maxHeight: \"400px\",\r\n            overflow: \"auto\",\r\n            border: \"1px solid gray\",\r\n            backgroundColor: \"darkslategray\",\r\n          }}\r\n        >\r\n          {this.state.data.map((word, index_1) => {\r\n            return (\r\n              <h4\r\n                key={index_1}\r\n                style={{\r\n                  backgroundColor:\r\n                    index_1 === this.state.currentWordIndex\r\n                      ? this.state.wrongWord\r\n                        ? \"red\"\r\n                        : \"#007bff\"\r\n                      : \"silver\",\r\n                  borderRadius: \"3px\",\r\n                  padding: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  display: \"inline-block\",\r\n                  color: this.state.wrongWords.includes(index_1)\r\n                    ? \"red\"\r\n                    : \"dark\",\r\n                }}\r\n              >\r\n                {word}{\" \"}\r\n              </h4>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg='3' className='text-right'>\r\n            <Button size='lg' onClick={this.handleShow}>\r\n              User Input\r\n            </Button>\r\n            <Modal\r\n              size='lg'\r\n              show={this.state.modalState}\r\n              onHide={this.handleClose}\r\n            >\r\n              <Modal.Body>\r\n                <Form.Group controlId='exampleForm.ControlTextarea1'>\r\n                  <Form.Label>Paste the Paragraph</Form.Label>\r\n                  <Form.Control\r\n                    as='textarea'\r\n                    rows={5}\r\n                    onChange={this.saveModalData}\r\n                  />\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant='danger' onClick={this.resetModalData}>\r\n                  Reset\r\n                </Button>\r\n\r\n                <Button variant='secondary' onClick={this.handleClose}>\r\n                  Close\r\n                </Button>\r\n\r\n                <Button variant='primary' onClick={this.saveData}>\r\n                  Save Changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n          <Col lg='3'>\r\n            <Form.Control\r\n              style={{\r\n                fontSize: \"25px\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              value={this.state.text}\r\n              type='text'\r\n              autoFocus={false}\r\n              onChange={this.changeText}\r\n              onKeyPress={this.onKeyPress}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant='dark'\r\n              size='lg'\r\n              style={{ color: this.state.isTimerVisible ? \"\" : \"#343A40\" }}\r\n              onClick={this.toggleTimerVisibility}\r\n            >\r\n              {this.state.timerDisplayValue}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextBox\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport TextBox from \"./Components/TextBox\"\nfunction App() {\n  return <TextBox />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}