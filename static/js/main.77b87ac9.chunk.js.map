{"version":3,"sources":["logo.svg","Components/TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","props","toggleTimerInput","setState","timerInput","state","changeTimer","e","a","undefined","minutes","Number","target","value","initializeTimer","filterDataAndSave","result","modalData","split","filter","word","index_1","data","handleShow","modalState","handleClose","saveData","saveModalData","trim","replaceAll","length","resetModalData","timerDisplayValue","toggleTimerVisibility","isTimerVisible","startTimer","timerReference","setInterval","seconds","displayValue","totalTime","clearInterval","changeText","textValue","text","currentWord","originalWord","currentWordIndex","substr","wrongWord","toggleTimer","isTimerOn","onKeyPress","which","wrongWords","scrollDown","document","getElementById","scrollTop","bind","this","id","style","fontSize","margin","padding","paddingBottom","maxHeight","overflow","border","backgroundColor","scrollBehavior","map","borderRadius","marginRight","display","color","includes","Row","Col","lg","className","Button","size","onClick","Modal","show","onHide","Body","Form","Group","controlId","Label","Control","as","rows","defaultValue","join","onChange","Footer","variant","fontWeight","type","autoFocus","onDoubleClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.77b87ac9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\"\r\nimport { Button, Form, Row, Col, Modal } from \"react-bootstrap\"\r\nimport styled from \"styled-components\"\r\n\r\nclass TextBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      // textArea related variables\r\n      text: \"\",\r\n      data: [],\r\n      currentWordIndex: 0,\r\n      wrongWord: false,\r\n      wrongWords: [],\r\n\r\n      // timer related variables\r\n      minutes: 1,\r\n      seconds: 60,\r\n      isTimerOn: false,\r\n      isTimerVisible: true,\r\n      timerReference: \"\",\r\n      timerDisplayValue: \"\",\r\n\r\n      // modal related variables\r\n      modalState: false,\r\n      modalData: \"\",\r\n\r\n      // changing timer through conditional operator\r\n      timerInput: false,\r\n    }\r\n    this.changeText = this.changeText.bind(this)\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n  toggleTimerInput = () => {\r\n    this.setState({ timerInput: !this.state.timerInput })\r\n  }\r\n\r\n  changeTimer = async e => {\r\n    var minutes = Number(e.target.value)\r\n    if (minutes !== undefined) await this.setState({ minutes: minutes })\r\n    this.initializeTimer()\r\n    this.toggleTimerInput()\r\n  }\r\n\r\n  filterDataAndSave = () => {\r\n    var result = this.state.modalData.split(\" \").filter((word, index_1) => {\r\n      if (word !== \"\") return word\r\n      return \"\"\r\n    })\r\n\r\n    this.setState({ data: result })\r\n  }\r\n  handleShow = () => {\r\n    this.setState({ modalState: true })\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ modalState: false })\r\n  }\r\n  saveData = () => {\r\n    this.filterDataAndSave()\r\n    this.handleClose()\r\n  }\r\n  saveModalData = e => {\r\n    var data = e.target.value.trim()\r\n    data = data.replaceAll(\"\\n\", \" \")\r\n    if (data.length) this.setState({ modalData: data })\r\n  }\r\n  resetModalData = () => {\r\n    this.setState({ modalData: \"\" })\r\n    this.setState({ data: [] })\r\n  }\r\n  componentDidMount() {\r\n    //this.scrollDown()\r\n    //  initialize the timer default value with pading\r\n    this.initializeTimer()\r\n  }\r\n  initializeTimer = () => {\r\n    this.setState({ timerDisplayValue: this.state.minutes + \":00\" })\r\n  }\r\n  toggleTimerVisibility = () => {\r\n    this.setState({ isTimerVisible: !this.state.isTimerVisible })\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerReference: setInterval(() => {\r\n        this.setState({ seconds: this.state.seconds - 1 })\r\n        var minutes = this.state.minutes - 1 + \":\"\r\n        var displayValue = this.state.seconds\r\n        if (displayValue < 10) {\r\n          displayValue = \"0\" + displayValue\r\n        }\r\n        var totalTime = minutes + displayValue\r\n        this.setState({ timerDisplayValue: totalTime })\r\n\r\n        if (this.state.seconds === 0) {\r\n          clearInterval(this.state.timerReference)\r\n          if (this.state.minutes !== 1) {\r\n            this.setState({ minutes: this.state.minutes - 1 })\r\n            this.startTimer()\r\n          }\r\n        }\r\n      }, 1000),\r\n    })\r\n  }\r\n  changeText = async e => {\r\n    var textValue = e.target.value.trim()\r\n    await this.setState({ text: textValue })\r\n\r\n    // the word that we have typed\r\n    var currentWord = this.state.text\r\n    //  original word so that we can match\r\n    var originalWord = this.state.data[this.state.currentWordIndex]\r\n\r\n    if (originalWord !== undefined) {\r\n      if (originalWord.substr(0, currentWord.length) !== currentWord) {\r\n        this.setState({ wrongWord: true })\r\n      } else {\r\n        this.setState({ wrongWord: false })\r\n      }\r\n    }\r\n  }\r\n  toggleTimer = () => {\r\n    this.setState({ isTimerOn: !this.state.isTimerOn })\r\n  }\r\n  onKeyPress = async e => {\r\n    if (!this.state.isTimerOn) {\r\n      this.startTimer()\r\n      this.toggleTimer()\r\n    }\r\n    if (e.which === 32 && this.state.text) {\r\n      // this method will be useful if you want to type\r\n      // this.setState({ data: this.state.data + this.state.text })\r\n\r\n      if (this.state.text !== this.state.data[this.state.currentWordIndex]) {\r\n        await this.setState({ wrongWord: true })\r\n      }\r\n\r\n      if (this.state.wrongWord) {\r\n        await this.setState({\r\n          wrongWords: [...this.state.wrongWords, this.state.currentWordIndex],\r\n        })\r\n      }\r\n      await this.setState({ currentWordIndex: this.state.currentWordIndex + 1 })\r\n      // reset the flag\r\n\r\n      this.setState({ text: \"\" })\r\n      this.setState({ wrongWord: false })\r\n\r\n      // after every words scrollDown function will be executed\r\n      if (this.state.currentWordIndex % 50 === 0) {\r\n        this.scrollDown()\r\n      }\r\n    }\r\n  }\r\n  scrollDown = () => {\r\n    var element = document.getElementById(\"data\")\r\n    //    var height = element.scrollHeight\r\n    var difference = 150\r\n    element.scrollTop += difference\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          id='data'\r\n          style={{\r\n            fontSize: \"30px\",\r\n            margin: \"20px\",\r\n            padding: \"20px\",\r\n            paddingBottom: \"60px\",\r\n            maxHeight: \"400px\",\r\n            overflow: \"auto\",\r\n            border: \"1px solid gray\",\r\n            backgroundColor: \"darkslategray\",\r\n            scrollBehavior: \"smooth\",\r\n          }}\r\n        >\r\n          {this.state.data.map((word, index_1) => {\r\n            return (\r\n              <h4\r\n                key={index_1}\r\n                style={{\r\n                  backgroundColor:\r\n                    index_1 === this.state.currentWordIndex\r\n                      ? this.state.wrongWord\r\n                        ? \"red\"\r\n                        : \"#007bff\"\r\n                      : \"silver\",\r\n                  borderRadius: \"3px\",\r\n                  padding: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  display: \"inline-block\",\r\n                  color: this.state.wrongWords.includes(index_1)\r\n                    ? \"red\"\r\n                    : \"dark\",\r\n                }}\r\n              >\r\n                {word}{\" \"}\r\n              </h4>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg='3' className='text-right'>\r\n            <Button size='lg' onClick={this.handleShow}>\r\n              User Input\r\n            </Button>\r\n\r\n            <Modal\r\n              size='lg'\r\n              show={this.state.modalState}\r\n              onHide={this.handleClose}\r\n            >\r\n              <Modal.Body>\r\n                <Form.Group controlId='exampleForm.ControlTextarea1'>\r\n                  <Form.Label>Paste the Paragraph</Form.Label>\r\n                  <Form.Control\r\n                    as='textarea'\r\n                    rows={5}\r\n                    defaultValue={this.state.data.join(\" \")}\r\n                    onChange={this.saveModalData}\r\n                  />\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant='danger' onClick={this.resetModalData}>\r\n                  Reset\r\n                </Button>\r\n\r\n                <Button variant='secondary' onClick={this.handleClose}>\r\n                  Close\r\n                </Button>\r\n\r\n                <Button variant='primary' onClick={this.saveData}>\r\n                  Save Changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n          <Col lg='3'>\r\n            <Form.Control\r\n              style={{\r\n                fontSize: \"25px\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              value={this.state.text}\r\n              type='text'\r\n              autoFocus={false}\r\n              onChange={this.changeText}\r\n              onKeyPress={this.onKeyPress}\r\n            />\r\n          </Col>\r\n          <Col lg='2'>\r\n            {!this.state.timerInput && (\r\n              <Button\r\n                variant='dark'\r\n                size='lg'\r\n                style={{ color: this.state.isTimerVisible ? \"\" : \"#343A40\" }}\r\n                onClick={this.toggleTimerVisibility}\r\n                onDoubleClick={this.toggleTimerInput}\r\n              >\r\n                {this.state.timerDisplayValue}\r\n              </Button>\r\n            )}\r\n            {this.state.timerInput && (\r\n              <Form.Control\r\n                as='select'\r\n                size='lg'\r\n                onChange={this.changeTimer}\r\n                defaultValue={this.state.minutes}\r\n              >\r\n                <option value='1'>1</option>\r\n                <option value='2'>2</option>\r\n                <option value='4'>4</option>\r\n                <option value='5'>5</option>\r\n              </Form.Control>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextBox\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport TextBox from \"./Components/TextBox\"\nfunction App() {\n  return <TextBox />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}