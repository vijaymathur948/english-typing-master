{"version":3,"sources":["logo.svg","Components/TextBox.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","props","toggleCase","state","case","setState","modalData","toLowerCase","toUpperCase","toggleTimerInput","timerInput","changeTimer","e","a","undefined","minutes","Number","target","value","initializeTimer","filterDataAndSave","result","replaceAll","split","filter","word","index_1","data","handleShow","modalState","handleClose","saveData","saveModalData","resetModalData","timerDisplayValue","toggleTimerVisibility","isTimerVisible","startTimer","timerReference","setInterval","seconds","displayValue","totalTime","clearInterval","changeText","textValue","trim","text","currentWord","originalWord","currentWordIndex","substr","length","wrongWord","toggleTimer","isTimerOn","onKeyPress","which","wrongWords","scrollDown","document","getElementById","scrollTop","importFile","file","FileReader","onload","readAsText","files","exportFile","element","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","bind","this","id","fontSize","margin","padding","paddingBottom","maxHeight","overflow","border","backgroundColor","scrollBehavior","map","borderRadius","marginRight","color","includes","Row","Col","lg","className","Button","size","onClick","Modal","show","onHide","Body","Form","Group","controlId","Label","Control","as","rows","onChange","Check","inline","type","checked","label","File","hidden","Footer","variant","fontWeight","autoFocus","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fc15786e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\"\r\nimport { Button, Form, Row, Col, Modal } from \"react-bootstrap\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nclass TextBox extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      // textArea related variables\r\n      text: \"\",\r\n      data: [],\r\n      currentWordIndex: 0,\r\n      wrongWord: false,\r\n      wrongWords: [],\r\n\r\n      // timer related variables\r\n      minutes: 1,\r\n      seconds: 60,\r\n      isTimerOn: false,\r\n      isTimerVisible: true,\r\n      timerReference: \"\",\r\n      timerDisplayValue: \"\",\r\n\r\n      // modal related variables\r\n      modalState: false,\r\n      modalData: \"\",\r\n\r\n      // changing timer through conditional operator\r\n      timerInput: false,\r\n\r\n      // some formatting relating tools\r\n      case: false,\r\n    }\r\n    this.changeText = this.changeText.bind(this)\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n\r\n  toggleCase = () => {\r\n    if (this.state.case) {\r\n      this.setState({ modalData: this.state.modalData.toLowerCase() })\r\n    } else {\r\n      this.setState({ modalData: this.state.modalData.toUpperCase() })\r\n    }\r\n    this.setState({ case: !this.state.case })\r\n  }\r\n  toggleTimerInput = () => {\r\n    this.setState({ timerInput: !this.state.timerInput })\r\n  }\r\n\r\n  changeTimer = async e => {\r\n    var minutes = Number(e.target.value)\r\n    if (minutes !== undefined) await this.setState({ minutes: minutes })\r\n    this.initializeTimer()\r\n    this.toggleTimerInput()\r\n  }\r\n\r\n  filterDataAndSave = () => {\r\n    var result = this.state.modalData.replaceAll(\"\\n\", \" \")\r\n\r\n    result = result.split(\" \").filter((word, index_1) => {\r\n      if (word !== \"\") return word\r\n      return \"\"\r\n    })\r\n\r\n    this.setState({ data: result })\r\n  }\r\n  handleShow = () => {\r\n    this.setState({ modalState: true })\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ modalState: false })\r\n  }\r\n  saveData = () => {\r\n    this.filterDataAndSave()\r\n    this.handleClose()\r\n  }\r\n  saveModalData = e => {\r\n    var data = e.target.value\r\n    this.setState({ modalData: data })\r\n  }\r\n  resetModalData = () => {\r\n    this.setState({ modalData: \"\" })\r\n    this.setState({ data: [] })\r\n  }\r\n  componentDidMount() {\r\n    //this.scrollDown()\r\n    //  initialize the timer default value with pading\r\n    this.initializeTimer()\r\n  }\r\n  initializeTimer = () => {\r\n    this.setState({ timerDisplayValue: this.state.minutes + \":00\" })\r\n  }\r\n  toggleTimerVisibility = () => {\r\n    this.setState({ isTimerVisible: !this.state.isTimerVisible })\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerReference: setInterval(() => {\r\n        this.setState({ seconds: this.state.seconds - 1 })\r\n        var minutes = this.state.minutes - 1 + \":\"\r\n        var displayValue = this.state.seconds\r\n        if (displayValue < 10) {\r\n          displayValue = \"0\" + displayValue\r\n        }\r\n        var totalTime = minutes + displayValue\r\n        this.setState({ timerDisplayValue: totalTime })\r\n\r\n        if (this.state.seconds === 0) {\r\n          clearInterval(this.state.timerReference)\r\n          if (this.state.minutes !== 1) {\r\n            this.setState({ minutes: this.state.minutes - 1 })\r\n            this.startTimer()\r\n          }\r\n        }\r\n      }, 1000),\r\n    })\r\n  }\r\n  changeText = async e => {\r\n    var textValue = e.target.value.trim()\r\n    await this.setState({ text: textValue })\r\n\r\n    // the word that we have typed\r\n    var currentWord = this.state.text\r\n    //  original word so that we can match\r\n    var originalWord = this.state.data[this.state.currentWordIndex]\r\n\r\n    if (originalWord !== undefined) {\r\n      if (originalWord.substr(0, currentWord.length) !== currentWord) {\r\n        this.setState({ wrongWord: true })\r\n      } else {\r\n        this.setState({ wrongWord: false })\r\n      }\r\n    }\r\n  }\r\n  toggleTimer = () => {\r\n    this.setState({ isTimerOn: !this.state.isTimerOn })\r\n  }\r\n  onKeyPress = async e => {\r\n    if (!this.state.isTimerOn) {\r\n      this.startTimer()\r\n      this.toggleTimer()\r\n    }\r\n    if (e.which === 32 && this.state.text) {\r\n      // this method will be useful if you want to type\r\n      // this.setState({ data: this.state.data + this.state.text })\r\n\r\n      if (this.state.text !== this.state.data[this.state.currentWordIndex]) {\r\n        await this.setState({ wrongWord: true })\r\n      }\r\n\r\n      if (this.state.wrongWord) {\r\n        await this.setState({\r\n          wrongWords: [...this.state.wrongWords, this.state.currentWordIndex],\r\n        })\r\n      }\r\n      await this.setState({ currentWordIndex: this.state.currentWordIndex + 1 })\r\n      // reset the flag\r\n\r\n      this.setState({ text: \"\" })\r\n      this.setState({ wrongWord: false })\r\n\r\n      // after every words scrollDown function will be executed\r\n      if (this.state.currentWordIndex % 50 === 0) {\r\n        this.scrollDown()\r\n      }\r\n    }\r\n  }\r\n  scrollDown = () => {\r\n    var element = document.getElementById(\"data\")\r\n    //    var height = element.scrollHeight\r\n    var difference = 150\r\n    element.scrollTop += difference\r\n  }\r\n\r\n  importFile = e => {\r\n    var str = \"this is just a content\"\r\n    //    var fi = new Blob([str])\r\n    // var fi = new File([str], \"simple.txt\")\r\n    // console.log(fi)\r\n    // fi.text()\r\n    //   .then(response => console.log(response))\r\n    //   .catch(error => console.log(error))\r\n\r\n    var file = new FileReader()\r\n    file.onload = e => {\r\n      var text = e.target.result\r\n      this.setState({ modalData: text })\r\n    }\r\n    file.readAsText(e.target.files[0])\r\n  }\r\n  exportFile = () => {\r\n    if (this.state.modalData.trim()) {\r\n      var fileName = \"data.txt\"\r\n      var element = document.createElement(\"a\")\r\n      element.setAttribute(\r\n        \"href\",\r\n        \"data:text/plain;charset=utf-8,\" +\r\n          encodeURIComponent(this.state.modalData)\r\n      )\r\n\r\n      element.setAttribute(\"download\", fileName)\r\n\r\n      element.style.display = \"none\"\r\n      document.body.appendChild(element)\r\n\r\n      element.click()\r\n\r\n      document.body.removeChild(element)\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          id='data'\r\n          style={{\r\n            fontSize: \"30px\",\r\n            margin: \"20px\",\r\n            padding: \"20px\",\r\n            paddingBottom: \"60px\",\r\n            maxHeight: \"400px\",\r\n            overflow: \"auto\",\r\n            border: \"1px solid gray\",\r\n            backgroundColor: \"darkslategray\",\r\n            scrollBehavior: \"smooth\",\r\n          }}\r\n        >\r\n          {this.state.data.map((word, index_1) => {\r\n            return (\r\n              <h4\r\n                key={index_1}\r\n                style={{\r\n                  backgroundColor:\r\n                    index_1 === this.state.currentWordIndex\r\n                      ? this.state.wrongWord\r\n                        ? \"red\"\r\n                        : \"#007bff\"\r\n                      : \"silver\",\r\n                  borderRadius: \"3px\",\r\n                  padding: \"10px\",\r\n                  marginRight: \"10px\",\r\n                  display: \"inline-block\",\r\n                  color: this.state.wrongWords.includes(index_1)\r\n                    ? \"red\"\r\n                    : \"dark\",\r\n                }}\r\n              >\r\n                {word}{\" \"}\r\n              </h4>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg='3' className='text-right'>\r\n            <Button size='lg' onClick={this.handleShow}>\r\n              User Input\r\n            </Button>\r\n\r\n            <Modal\r\n              size='lg'\r\n              show={this.state.modalState}\r\n              onHide={this.handleClose}\r\n            >\r\n              <Modal.Body>\r\n                <Form.Group controlId='modal.data'>\r\n                  <Form.Label>Paste the Paragraph</Form.Label>\r\n                  <Form.Control\r\n                    as='textarea'\r\n                    rows={5}\r\n                    value={this.state.modalData}\r\n                    onChange={this.saveModalData}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group style={{ display: \"inline-flex\" }}>\r\n                  <Form.Group controlId='modal.case'>\r\n                    <Form.Check\r\n                      inline\r\n                      type='checkbox'\r\n                      checked={this.state.case}\r\n                      onChange={this.toggleCase}\r\n                      label='Toggle Case'\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group className='mx-2'>\r\n                    <Button onClick={this.exportFile}>Download</Button>\r\n                  </Form.Group>\r\n                  <Form.Group>\r\n                    <Form.File\r\n                      id='modal.file'\r\n                      onChange={this.importFile}\r\n                      hidden={true}\r\n                    />\r\n                    <Button\r\n                      onClick={() => {\r\n                        var fileElement = document.getElementById(\"modal.file\")\r\n                        fileElement.click()\r\n                      }}\r\n                    >\r\n                      Import\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant='danger' onClick={this.resetModalData}>\r\n                  Reset\r\n                </Button>\r\n\r\n                <Button variant='secondary' onClick={this.handleClose}>\r\n                  Close\r\n                </Button>\r\n\r\n                <Button variant='primary' onClick={this.saveData}>\r\n                  Save Changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n          <Col lg='3'>\r\n            <Form.Control\r\n              style={{\r\n                fontSize: \"25px\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              value={this.state.text}\r\n              type='text'\r\n              autoFocus={false}\r\n              onChange={this.changeText}\r\n              onKeyPress={this.onKeyPress}\r\n            />\r\n          </Col>\r\n          {/* <Col lg='2'>\r\n            {!this.state.timerInput && (\r\n              <Button\r\n                variant='dark'\r\n                size='lg'\r\n                style={{ color: this.state.isTimerVisible ? \"\" : \"#343A40\" }}\r\n                onClick={this.toggleTimerVisibility}\r\n                onDoubleClick={this.toggleTimerInput}\r\n              >\r\n                {this.state.timerDisplayValue}\r\n              </Button>\r\n            )}\r\n            {this.state.timerInput && (\r\n              <Form.Control\r\n                as='select'\r\n                size='lg'\r\n                onChange={this.changeTimer}\r\n                defaultValue={this.state.minutes}\r\n              >\r\n                <option value='1'>1</option>\r\n                <option value='2'>2</option>\r\n                <option value='4'>4</option>\r\n                <option value='5'>5</option>\r\n              </Form.Control>\r\n            )}\r\n          </Col>\r\n        */}\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextBox\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport TextBox from \"./Components/TextBox\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Router>\n      <TextBox />\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}